---
image: quay.io/okderators/gitops-operator-bundle:1.13.0-2024-08-09-135916
name: gitops-operator.v1.13.0-2024-08-09-135916
package: gitops-operator
properties:
- type: olm.gvk
  value:
    group: argoproj.io
    kind: AnalysisRun
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: AnalysisTemplate
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: AppProject
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: Application
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: ApplicationSet
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: ArgoCD
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: ArgoCD
    version: v1beta1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: ClusterAnalysisTemplate
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: Experiment
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: NotificationsConfiguration
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: Rollout
    version: v1alpha1
- type: olm.gvk
  value:
    group: argoproj.io
    kind: RolloutManager
    version: v1alpha1
- type: olm.gvk
  value:
    group: pipelines.openshift.io
    kind: GitopsService
    version: v1alpha1
- type: olm.package
  value:
    packageName: gitops-operator
    version: 1.13.0-2024-08-09-135916
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "AppProject",
            "metadata": {
              "name": "example"
            },
            "spec": null
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "Application",
            "metadata": {
              "name": "example"
            },
            "spec": null
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "ApplicationSet",
            "metadata": {
              "name": "example"
            },
            "spec": null
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "NotificationsConfiguration",
            "metadata": {
              "name": "default-notifications-configuration"
            },
            "spec": {
              "templates": {
                "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
              },
              "triggers": {
                "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
              }
            }
          },
          {
            "apiVersion": "argoproj.io/v1beta1",
            "kind": "ArgoCD",
            "metadata": {
              "name": "argocd"
            },
            "spec": {
              "controller": {
                "resources": {
                  "limits": {
                    "cpu": "2000m",
                    "memory": "2048Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "1024Mi"
                  }
                }
              },
              "ha": {
                "enabled": false,
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "128Mi"
                  }
                }
              },
              "rbac": {
                "defaultPolicy": "",
                "policy": "g, system:cluster-admins, role:admin\n",
                "scopes": "[groups]"
              },
              "redis": {
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "128Mi"
                  }
                }
              },
              "repo": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "1024Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                }
              },
              "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
              "server": {
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "125m",
                    "memory": "128Mi"
                  }
                },
                "route": {
                  "enabled": true
                }
              },
              "sso": {
                "dex": {
                  "openShiftOAuth": true,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "provider": "dex"
              }
            }
          },
          {
            "apiVersion": "pipelines.openshift.io/v1alpha1",
            "kind": "GitopsService",
            "metadata": {
              "name": "gitopsservice-sample"
            },
            "spec": null
          }
        ]
      capabilities: Deep Insights
      console.openshift.io/plugins: '["gitops-plugin"]'
      containerImage: quay.io/okderators/gitops-operator
      createdAt: "2024-08-09T13:12:43Z"
      description: Enables teams to adopt GitOps principles for managing cluster configurations
        and application delivery across hybrid multi-cluster Kubernetes environments.
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "true"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      operatorframework.io/cluster-monitoring: "true"
      operatorframework.io/suggested-namespace: openshift-gitops-operator
      operators.openshift.io/infrastructure-features: '["disconnected"]'
      operators.operatorframework.io/builder: operator-sdk-v1.33.0
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/redhat-developer/gitops-operator
      support: OKD Community
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns
          are like Jobs in that they eventually complete.
        displayName: AnalysisRun
        kind: AnalysisRun
        name: analysisruns.argoproj.io
        version: v1alpha1
      - description: An AnalysisTemplate is a template spec which defines how to perform
          a canary analysis, such as the metrics, its frequency, and the values which
          are considered successful or failed.
        displayName: AnalysisTemplate
        kind: AnalysisTemplate
        name: analysistemplates.argoproj.io
        version: v1alpha1
      - description: An Application is a group of Kubernetes resources as defined
          by a manifest.
        displayName: Application
        kind: Application
        name: applications.argoproj.io
        version: v1alpha1
      - description: ApplicationSet is the representation of an ApplicationSet controller
          deployment.
        displayName: ApplicationSet
        kind: ApplicationSet
        name: applicationsets.argoproj.io
        version: v1alpha1
      - description: An AppProject is a logical grouping of Argo CD Applications.
        displayName: AppProject
        kind: AppProject
        name: appprojects.argoproj.io
        version: v1alpha1
      - kind: ArgoCD
        name: argocds.argoproj.io
        version: v1alpha1
      - description: Argo CD is the representation of an Argo CD deployment.
        displayName: Argo CD
        kind: ArgoCD
        name: argocds.argoproj.io
        resources:
        - kind: ArgoCD
          name: ""
          version: v1beta1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Ingress
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Prometheus
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Route
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ServiceMonitor
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        version: v1beta1
      - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it
          is not limited to its namespace. It can be used by any Rollout throughout
          the cluster.
        displayName: ClusterAnalysisTemplate
        kind: ClusterAnalysisTemplate
        name: clusteranalysistemplates.argoproj.io
        version: v1alpha1
      - description: An Experiment is limited run of one or more ReplicaSets for the
          purposes of analysis. Experiments typically run for a pre-determined duration,
          but can also run indefinitely until stopped.
        displayName: Experiment
        kind: Experiment
        name: experiments.argoproj.io
        version: v1alpha1
      - description: GitopsService is the Schema for the gitopsservices API
        displayName: Gitops Service
        kind: GitopsService
        name: gitopsservices.pipelines.openshift.io
        version: v1alpha1
      - description: NotificationsConfigurations contains the notification template
          used to generate notifications that notify users about important changes
          in the application state.
        displayName: NotificationsConfiguration
        kind: NotificationsConfiguration
        name: notificationsconfigurations.argoproj.io
        version: v1alpha1
      - description: A controller for managing Argo Rollouts
        displayName: RolloutManager
        kind: RolloutManager
        name: rolloutmanagers.argoproj.io
        version: v1alpha1
      - kind: Rollout
        name: rollouts.argoproj.io
        version: v1alpha1
    description: "OKD GitOps is a declarative continuous delivery platform based on
      [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps
      principles for managing cluster configurations and automating secure and repeatable
      application delivery across hybrid multi-cluster Kubernetes environments. Following
      GitOps and infrastructure as code principles, you can store the configuration
      of clusters and applications in Git repositories and use Git workflows to roll
      them out to the target clusters.\n\n## Features\n* Automated install and upgrades
      of Argo CD\n* Manual and automated configuration sync from Git repositories
      to target OKD and Kubernetes clusters\n* Support for the Helm and Kustomize
      templating tools\n* Configuration drift detection and visualization on live
      clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging
      integration with OKD\n* Automated GitOps bootstrapping using Tekton and Argo
      CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n##
      Components\n* Argo CD 2.7.6\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n##
      How to Install \nAfter installing the OKD GitOps operator, an instance  of Argo
      CD is installed in the `openshift-gitops` namespace which has sufficent privileges
      for managing cluster configurations. You can create additional Argo CD instances
      using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion:
      argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n
      \   route:\n      enabled: true\n```\n\nOKD GitOps is a layered product on top
      of OKD that enables teams to adopt GitOps principles for managing cluster configurations
      and automating secure and repeatable application delivery across hybrid multi-cluster
      Kubernetes environments. OKD GitOps is built around Argo CD as the core upstream
      project and assists customers to establish an end-to-end application delivery
      workflow on GitOps principles.\n"
    displayName: OKD GitOps
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - devtools
    - gitops
    - pipelines
    links:
    - name: Day 1 Operations
      url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
    - name: Day 2 Operations
      url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
    maintainers:
    - email: shbose@redhat.com
      name: shoubhik
    maturity: alpha
    provider:
      name: OKD Community
relatedImages:
- image: quay.io/okderators/gitops-operator-bundle:1.13.0-2024-08-09-135916
  name: ""
- image: quay.io/okderators/gitops-operator:1.13.0-2024-08-09-135916
  name: ""
- image: quay.io/okderators/kube-rbac-proxy:4.15
  name: ""
schema: olm.bundle
